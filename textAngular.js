// Generated by CoffeeScript 1.6.3
/*
textAngular
Author : Austin Anderson
License : 2013 MIT
Version 1.1.0

Requirements: Angular 1.2.0, Angular ngSanitize module
Optional Requirements: Bootstrap 3.0.0 and font-awesome for styling if you are using the default classes and icons.

How to Use:

1. Include textAngular.js in your project, alternatively grab all this code and throw it in your directives.js module file.
2. In your HTML instantiate textAngular as an attribute or element, the only required attribute is the ta-model which is the variable to bind the content of the editor to.
3. I reccommend using the following CSS in your stylesheet or a variant of to display the text box nicely:
	
.ta-editor{
	min-height: 300px;
	height: auto;
	overflow: auto;
	font-family: inherit;
	font-size: 100%;
}

4. Have fun!

Setting Options:

Several options can be set through attributes on the HTML tag, these are;
	- ta-toolbar: this should evaluate to an array of arrays. Each element is the name of one of the toolbar tools. The default is: [['h1', 'h2', 'h3', 'p', 'pre', 'bold', 'italics', 'ul', 'ol', 'redo', 'undo', 'clear'],['html', 'insertImage', 'insertLink']]
	- ta-toolbar-class: this is the class to apply to the overall div of the toolbar, defaults to "btn-toolbar". Note that the class "ta-toolbar" is also added to the toolbar.
	- ta-toolbar-group-class: this is the class to apply to the nested groups in the toolbar, a div with this class is created for each nested array in the ta-toolbar array and then the tool buttons are nested inside the group, defaults to "btn-group".
	- ta-toolbar-button-class: this is the class to apply to each tool button in the toolbar, defaults to: "btn btn-default"
	- ta-toolbar-active-button-class: this is the class to apply to each tool button in the toolbar if it's activeState function returns true ie when a tool function is applied to the selected text, defaults to: "active".
	- ta-text-editor-class: this is the class to apply to the text editor <pre>, defaults to "form-control". Note that the classes: ta-editor and ta-text are also added.
	- ta-html-editor-class: this is the class to apply to the html editor <div>, defaults to "form-control". Note that the classes: ta-editor and ta-html are also added.

The defaults can be changed by altering/overwriting the variable: $rootScope.textAngularOpts which acts like global defaults for the classes and toolbar.
The default value for this is: 
	$rootScope.textAngularOpts = {
		toolbar: [['h1', 'h2', 'h3', 'p', 'pre', 'bold', 'italics', 'ul', 'ol', 'redo', 'undo', 'clear'],['html', 'insertImage', 'insertLink']],
		classes: {
			toolbar: "btn-toolbar",
			toolbarGroup: "btn-group",
			toolbarButton: "btn btn-default",
			toolbarButtonActive: "active",
			textEditor: 'form-control',
			htmlEditor: 'form-control'
		}
	}

The toolbar buttons are defined in the object variable $rootScope.textAngularTools.
The following is an example of how to add a button to make the selected text red:
`
$rootScope.textAngularTools.colourRed = {
	display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-square' style='color: red;'></i></button>",
	action: function(){
		this.$parent.wrapSelection('formatBlock', '<span style="color: red">');
	},
	activeState: function(){return false;} //This isn't required, and currently doesn't work reliably except for the html tag that doesn't rely on the cursor position.
};
//the following adds it to the toolbar to be displayed and used.
$rootScope.textAngularOpts.toolbar = [['h1', 'h2', 'h3', 'p', 'pre', 'bold', 'colourRed', 'italics', 'ul', 'ol', 'redo', 'undo', 'clear'],['html', 'insertImage', 'insertLink']];
`
To explain how this works, when we create a button we create an isolated child scope of the textAngular scope and extend it with the values in the tools object, we then compile the HTML in the display value with the newly created scope.
Note that the way any functions are called in the plugins the 'this' variable will allways point to the scope of the button ensuring that this.$parent will allways 
Here's the code we run for every tool:

`
toolElement = angular.element($rootScope.textAngularTools[tool].display);
toolElement.addClass(scope.classes.toolbarButton);
groupElement.append($compile(toolElement)(angular.extend scope.$new(true), $rootScope.textAngularTools[tool]));
`
*/


(function() {
  var textAngular;

  textAngular = angular.module("textAngular", ['ngSanitize']);

  textAngular.directive("textAngular", function($compile, $sce, $window, $document, $rootScope, $timeout) {
    var sanitizationWrapper;
    console.log("Thank you for using textAngular! http://www.textangular.com");
    $rootScope.textAngularOpts = angular.extend({
      toolbar: [['h1', 'h2', 'h3', 'p', 'pre', 'bold', 'italics', 'ul', 'ol', 'redo', 'undo', 'clear'], ['html', 'insertImage', 'insertLink']],
      classes: {
        toolbar: "btn-toolbar",
        toolbarGroup: "btn-group",
        toolbarButton: "btn btn-default",
        toolbarButtonActive: "active",
        textEditor: 'form-control',
        htmlEditor: 'form-control'
      }
    }, $rootScope.textAngularOpts != null ? $rootScope.textAngularOpts : {});
    $rootScope.textAngularTools = angular.extend({
      html: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'>Toggle HTML</button>",
        action: function() {
          var ht,
            _this = this;
          this.$parent.showHtml = !this.$parent.showHtml;
          if (this.$parent.showHtml) {
            ht = this.$parent.displayElements.text.html();
            $timeout((function() {
              return _this.$parent.displayElements.html[0].focus();
            }), 100);
          } else {
            ht = this.$parent.displayElements.html.html();
            $timeout((function() {
              return _this.$parent.displayElements.text[0].focus();
            }), 100);
          }
          return this.$parent.compileHtml(ht);
        },
        activeState: function() {
          return !this.showHtml;
        }
      },
      h1: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'>H1</button>",
        action: function() {
          return this.$parent.wrapSelection("formatBlock", "<H1>");
        }
      },
      h2: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'>H2</button>",
        action: function() {
          return this.$parent.wrapSelection("formatBlock", "<H2>");
        }
      },
      h3: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'>H3</button>",
        action: function() {
          return this.$parent.wrapSelection("formatBlock", "<H3>");
        }
      },
      p: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'>P</button>",
        action: function() {
          return this.$parent.wrapSelection("formatBlock", "<P>");
        }
      },
      pre: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'>pre</button>",
        action: function() {
          return this.$parent.wrapSelection("formatBlock", "<PRE>");
        }
      },
      ul: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-list-ul'></i></button>",
        action: function() {
          return this.$parent.wrapSelection("insertUnorderedList", null);
        }
      },
      ol: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-list-ol'></i></button>",
        action: function() {
          return this.$parent.wrapSelection("insertOrderedList", null);
        }
      },
      quote: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-quote-right'></i></button>",
        action: function() {
          return this.$parent.wrapSelection("formatBlock", "<BLOCKQUOTE>");
        }
      },
      undo: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-undo'></i></button>",
        action: function() {
          return this.$parent.wrapSelection("undo", null);
        }
      },
      redo: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-repeat'></i></button>",
        action: function() {
          return this.$parent.wrapSelection("redo", null);
        }
      },
      bold: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-bold'></i></button>",
        action: function() {
          return this.$parent.wrapSelection("bold", null);
        },
        activeState: function() {
          return $document[0].queryCommandState('bold');
        }
      },
      justifyLeft: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-align-left'></i></button>",
        action: function() {
          return this.$parent.wrapSelection("justifyLeft", null);
        },
        activeState: function() {
          return $document[0].queryCommandState('justifyLeft');
        }
      },
      justifyRight: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-align-right'></i></button>",
        action: function() {
          return this.$parent.wrapSelection("justifyRight", null);
        },
        activeState: function() {
          return $document[0].queryCommandState('justifyRight');
        }
      },
      justifyCenter: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-align-center'></i></button>",
        action: function() {
          return this.$parent.wrapSelection("justifyCenter", null);
        },
        activeState: function() {
          return $document[0].queryCommandState('justifyCenter');
        }
      },
      italics: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-italic'></i></button>",
        action: function() {
          return this.$parent.wrapSelection("italic", null);
        },
        activeState: function() {
          return $document[0].queryCommandState('italic');
        }
      },
      clear: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-ban'></i></button>",
        action: function() {
          return this.$parent.wrapSelection("FormatBlock", "<div>");
        }
      },
      insertImage: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-picture-o'></i></button>",
        action: function() {
          var imageLink;
          imageLink = prompt("Please enter an image URL to insert", 'http://');
          if (imageLink !== '') {
            return this.$parent.wrapSelection('insertImage', imageLink);
          }
        }
      },
      insertLink: {
        display: "<button ng-click='action()' ng-class='displayActiveToolClass(active)'><i class='fa fa-chain'></i></button>",
        action: function() {
          var urlLink;
          urlLink = prompt("Please enter an URL to insert", 'http://');
          if (urlLink !== '') {
            return this.$parent.wrapSelection('createLink', urlLink);
          }
        }
      }
    }, $rootScope.textAngularTools != null ? $rootScope.textAngularTools : {});
    sanitizationWrapper = function(html) {
      return $sce.trustAsHtml(html);
    };
    return {
      scope: {
        model: "=taModel"
      },
      restrict: "EA",
      link: function(scope, element, attrs) {
        var group, groupElement, keydown, keyup, tool, toolElement, _i, _j, _len, _len1, _ref;
        angular.extend(scope, $rootScope.textAngularOpts, {
          compileHtml: function(html) {
            var compHtml;
            compHtml = angular.element("<div>").append(html).html().replace(/(class="(.*?)")|(class='(.*?)')/g, "").replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/style=("|')(.*?)("|')/g, "");
            if (this.showHtml === "load") {
              this.text = sanitizationWrapper(compHtml);
              this.html = sanitizationWrapper(compHtml.replace(/</g, "&lt;"));
              this.showHtml = this.showHtmlDefault || false;
            } else if (this.showHtml) {
              this.text = sanitizationWrapper(compHtml);
            } else {
              this.html = sanitizationWrapper(compHtml.replace(/</g, "&lt;"));
            }
            return this.model = compHtml;
          },
          wrapSelection: function(command, opt, updateDisplay) {
            if (updateDisplay == null) {
              updateDisplay = true;
            }
            document.execCommand(command, false, opt);
            if (this.showHtml) {
              this.displayElements.text[0].focus();
            } else {
              this.displayElements.html[0].focus();
            }
            if (updateDisplay) {
              return this.updateDisplay();
            }
          },
          updateDisplay: function() {
            return this.compileHtml(!this.showHtml ? this.displayElements.html.html() : this.displayElements.text.html());
          },
          showHtml: false,
          displayActiveToolClass: function(active) {
            if (active) {
              return this.classes.toolbarButtonActive;
            } else {
              return '';
            }
          }
        });
        if (!!attrs.taToolbar) {
          scope.toolbar = scope.$eval(attrs.taToolbar);
        }
        if (!!attrs.taToolbarClass) {
          scope.classes.toolbar = attrs.taToolbarClass;
        }
        if (!!attrs.taToolbarGroupClass) {
          scope.classes.toolbarGroup = attrs.taToolbarGroupClass;
        }
        if (!!attrs.taToolbarButtonClass) {
          scope.classes.toolbarButton = attrs.taToolbarButtonClass;
        }
        if (!!attrs.taToolbarActiveButtonClass) {
          scope.classes.toolbarButtonActive = attrs.taToolbarActiveButtonClass;
        }
        if (!!attrs.taTextEditorClass) {
          scope.classes.textEditor = attrs.taTextEditorClass;
        }
        if (!!attrs.taHtmlEditorClass) {
          scope.classes.htmlEditor = attrs.taHtmlEditorClass;
        }
        scope.displayElements = {
          toolbar: angular.element("<div></div>"),
          text: angular.element("<pre contentEditable='true' ng-show='showHtml' ng-bind-html='html' ></pre>"),
          html: angular.element("<div contentEditable='true' ng-hide='showHtml' ng-bind-html='text' ></div>")
        };
        element.append(scope.displayElements.toolbar);
        element.append(scope.displayElements.text);
        element.append(scope.displayElements.html);
        $compile(scope.displayElements.text)(scope);
        $compile(scope.displayElements.html)(scope);
        element.addClass("ta-root");
        scope.displayElements.toolbar.addClass("ta-toolbar " + scope.classes.toolbar);
        scope.displayElements.text.addClass("ta-text ta-editor " + scope.classes.textEditor);
        scope.displayElements.html.addClass("ta-html ta-editor " + scope.classes.textEditor);
        _ref = scope.toolbar;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          group = _ref[_i];
          groupElement = angular.element("<div></div>");
          groupElement.addClass(scope.classes.toolbarGroup);
          for (_j = 0, _len1 = group.length; _j < _len1; _j++) {
            tool = group[_j];
            toolElement = angular.element($rootScope.textAngularTools[tool].display);
            toolElement.addClass(scope.classes.toolbarButton);
            toolElement.attr('unselectable', 'on');
            groupElement.append($compile(toolElement)(angular.extend(scope.$new(true), $rootScope.textAngularTools[tool])));
          }
          scope.displayElements.toolbar.append(groupElement);
        }
        scope.$watch("model", (function(newVal, oldVal) {
          if (!($document[0].activeElement === scope.displayElements.html[0]) && !($document[0].activeElement === scope.displayElements.text[0])) {
            scope.text = sanitizationWrapper(newVal);
            return scope.html = sanitizationWrapper(newVal.replace(/</g, "&lt;"));
          }
        }), true);
        scope.compileHtml(scope.model);
        scope.bUpdateSelectedStyles = false;
        scope.updateSelectedStyles = function() {
          var groups, _k, _l, _len2, _len3, _ref1;
          _ref1 = scope.toolbar;
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            groups = _ref1[_k];
            for (_l = 0, _len3 = groups.length; _l < _len3; _l++) {
              tool = groups[_l];
              $rootScope.textAngularTools[tool].active = $rootScope.textAngularTools[tool].activeState != null ? $rootScope.textAngularTools[tool].activeState.apply(scope) : false;
            }
          }
          if (this.bUpdateSelectedStyles) {
            return $timeout(this.updateSelectedStyles, 200);
          }
        };
        keydown = function(e) {
          scope.bUpdateSelectedStyles = true;
          return scope.updateSelectedStyles();
        };
        scope.displayElements.html.on('keydown', keydown);
        scope.displayElements.text.on('keydown', keydown);
        keyup = function(e) {
          scope.bUpdateSelectedStyles = false;
          return scope.$apply(function() {
            return scope.updateDisplay();
          });
        };
        scope.displayElements.html.on('keyup', keyup);
        return scope.displayElements.text.on('keyup', keyup);
      }
    };
  });

}).call(this);
